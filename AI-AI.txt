8-puzzle problem

.......................................


import copy
from heapq import heappush, heappop

n = 3
rows = [1, 0, -1, 0]
cols = [0, -1, 0, 1]

class priorityQueue:
    def __init__(self):
        self.heap = []

    def push(self, key):
        heappush(self.heap, key)

    def pop(self):
        return heappop(self.heap)

    def empty(self):
        if not self.heap:
            return True
        else:
            return False

class nodes:
    def __init__(self, parent, mats, empty_tile_posi,
                 costs, levels):
        self.parent = parent
        self.mats = mats
        self.empty_tile_posi = empty_tile_posi
        self.costs = costs
        self.levels = levels

    def __lt__(self, nxt):
        return self.costs < nxt.costs

def calculateCosts(mats, final) -> int:
    count = 0
    for i in range(n):
        for j in range(n):
            if ((mats[i][j]) and
                    (mats[i][j] != final[i][j])):
                count += 1
    return count

def newNodes(mats, empty_tile_posi, new_empty_tile_posi,
             levels, parent, final) -> nodes:
    new_mats = copy.deepcopy(mats)
    x1 = empty_tile_posi[0]
    y1 = empty_tile_posi[1]
    x2 = new_empty_tile_posi[0]
    y2 = new_empty_tile_posi[1]
    new_mats[x1][y1], new_mats[x2][y2] = new_mats[x2][y2], new_mats[x1][y1]
    costs = calculateCosts(new_mats, final)
    new_nodes = nodes(parent, new_mats, new_empty_tile_posi,
                      costs, levels)
    return new_nodes

def printMatsrix(mats):
    for i in range(n):
        for j in range(n):
            print("%d " % (mats[i][j]), end=" ")
        print()

def isSafe(x, y):
    return x >= 0 and x < n and y >= 0 and y < n

def printPath(root):
    if root == None:
        return
    printPath(root.parent)
    printMatsrix(root.mats)
    print()

def solve(initial, empty_tile_posi, final):
    pq = priorityQueue()
    costs = calculateCosts(initial, final)
    root = nodes(None, initial,
                 empty_tile_posi, costs, 0)
    pq.push(root)
    while not pq.empty():
        minimum = pq.pop()
        if minimum.costs == 0:
            printPath(minimum)
            return
        for i in range(n):
            new_tile_posi = [
                minimum.empty_tile_posi[0] + rows[i],
                minimum.empty_tile_posi[1] + cols[i], ]
            if isSafe(new_tile_posi[0], new_tile_posi[1]):
                child = newNodes(minimum.mats,
                                 minimum.empty_tile_posi,
                                 new_tile_posi,
                                 minimum.levels + 1,
                                 minimum, final, )
                pq.push(child)

initial = [[1, 2, 3],
           [5, 6, 0],
           [7, 8, 4]]

final = [[1, 2, 3],
         [5, 8, 6],
         [0, 7, 4]]

empty_tile_posi = [1, 2]
solve(initial, empty_tile_posi, final)


...............................................

BSF uninformed search techniques

...............................................


graph = {
    '10': ['2', '3'],
    '3': ['3'],
    '2': ['4'],
    '4': ['2', '3'],

}

visited = []  # List for visited nodes.
queue = []  # Initialize a queue


def bfs(visited, graph, node):  # function for BFS
    visited.append(node)
    queue.append(node)

    while queue:  # Creating loop to visit each node
        m = queue.pop(0)
        print(m, end=" ")

        for neighbour in graph[m]:
            if neighbour not in visited:
                visited.append(neighbour)
                queue.append(neighbour)


# Driver Code
print("Following is the Breadth-First Search")
bfs(visited, graph, '10')  # function calling


..................................................

informed search techniques 8-puzzle using A* 

..................................................


import random
import time


class Node:
    def __init__(self, value, parent=None):
        self.value = value
        self.parent = parent
        if self.parent is not None:
            self.g = self.parent.g + 1
        else:
            self.g = 0

    @property
    def h(self):
        return manhattan_distance(self.value)

    @property
    def f(self):
        return self.g + self.h


goal_state = [' ', 1, 2, 3, 4, 5, 6, 7, 8]
closed_list = []
possible_moves = ((1, 3), (0, 4, 2), (1, 5), (0, 4, 6),
                  (1, 3, 5, 7), (2, 4, 8), (3, 7),
                  (6, 4, 8), (5, 7))


def generate_random_list() -> Node:
    l = [' ', 1, 2, 3, 4, 5, 6, 7, 8]
    l = random.sample(l, len(l))
    return Node(l)


initial_state = generate_random_list()


def generate_moves(node: Node) -> list[(int, Node)]:
    empty_index = node.value.index(' ')
    next_solutions = []

    for i in possible_moves[empty_index]:
        new_node = Node(swap_list_items(node.value, empty_index, i), node)
        if not tuple(new_node.value) in closed_list:
            next_solutions.append([new_node.f, new_node])
    return next_solutions


def swap_list_items(l: list, p1: int, p2: int) -> list:
    new_list = l.copy()
    new_list[p1], new_list[p2] = new_list[p2], new_list[p1]
    return new_list


def manhattan_distance(l: list) -> int:
    total = 0
    for i in l:
        if i == ' ':
            continue
        position = l.index(i)

        if i <= 2:
            if position <= 2:
                vertical = 0
            elif position <= 5:
                vertical = 1
            else:
                vertical = 2
        elif i <= 5:
            if 3 <= position <= 5:
                vertical = 0
            else:
                vertical = 1
        else:
            if position <= 2:
                vertical = 2
            elif position <= 5:
                vertical = 1
            else:
                vertical = 0


        if i % 3 == 0:
            if position % 3 == 0:
                horizontal = 0
            elif position % 3 == 1:
                horizontal = 1
            else:
                horizontal = 2
        elif i % 3 == 1:
            if position % 3 == 1:
                horizontal = 0
            else:
                horizontal = 1
        else:
            if position % 3 == 0:
                horizontal = 2
            elif position % 3 == 1:
                horizontal = 1
            else:
                horizontal = 0
        total += vertical + horizontal
    return total


def display_board(l: list) -> None:
    print(f" {l[0]} | {l[1]} | {l[2]}")
    print(f" {l[3]} | {l[4]} | {l[5]}")
    print(f" {l[6]} | {l[7]} | {l[8]}\n")


def a_star(state: Node) -> list:
    pqueue = []
    while True:
        if state.value == goal_state:
            route_to_goal = [state.value]
            while state.parent is not None:
                route_to_goal.append(state.parent.value)
                state = state.parent
            return reversed(route_to_goal)

        closed_list.append(tuple(state.value))
        pqueue += generate_moves(state)
        pqueue.sort(key=lambda x: x[0])
        state = pqueue.pop(0)[1]


print(f'initial board:')
display_board(initial_state.value)
print(f'now finding the route to the solution...')
print(f'(IF STUCK, TRY AGAIN. SOME RANDOM CONFIGURATIONS INCREASE THE TIME COMPLEXITY '
      f'BY A CONSIDERABLE AMOUNT)')

t0 = time.perf_counter()
route = a_star(initial_state)
t1 = time.perf_counter()

print(f'\nFOUND!\n\nstarting from the initial state, the route goes like this:')

length = -1
for i in route:
    display_board(i)
    length += 1

print(f'time taken to find: {t1 - t0}s')
print(f'total number of steps needed to solve: {length}')




..........................................................

min-max

.........................................................


import math 
import random
def fun_Minmax ( cd, node, maxt, scr, te):
    if(cd == td):
        return scr[node]
    if(maxt):
        return max(fun_Minmax(cd + 1, node*2, False, scr, td), fun_Minmax(cd + 1, node*2+1, False, scr, td))
    else:
            return min(fun_Minmax(cd + 1, node*2, True, scr, td), fun_Minmax(cd + 1, node*2+1, True, scr, td))
scr = []
x= int (input(" Enter total number of leaf node =")) 
for i in range (x) :
    y = int ( input ( " Enter leaf value: " ))
    scr.append(y)
td = math.log(len(scr), 2)
cd = int(input("Enter current depth value: "))
node = int(input("Enter node value: "))
maxt = True
print("The answer is :", end="")
answer = fun_Minmax(cd, node, maxt, scr, td)
print(answer)


........................................................


hill climbing

........................................................


SuccList = {'A': [['B', 3], ['C', 2]], 'B': [['D', 2], ['E', 3]], 'C': [['F', 2], ['G', 4]], 'D': [['H', 1], ['I', 99]],
            'F': [['J', 99]], 'G': [['K', 99], ['L', 3]]}
Start = 'A'
Closed = list()

def MOVEGEN(N):
    New_list = list()
    if N in SuccList.keys():
        New_list = SuccList[N]

        return New_list


def SORT(L):
    L.sort(key=lambda x: x[1])
    return L


def heu(Node):
    return Node[1]


def APPEND(L1, L2):
    New_list = list(L1) + list(L2)
    return New_list


def Hill_Climbing(Start):
    global Closed
    N = Start
    CHILD = MOVEGEN(N)
    SORT(CHILD)
    N = [Start, 5]
    print("\nStart=", N)
    print("Sorted Child List=", CHILD)
    newNode = CHILD[0]
    CLOSED = [N]

    while heu(newNode) <= heu(N):
        print("\n---------------------")
        N = newNode
        print("N=", N)
        CLOSED = APPEND(CLOSED, [N])
        CHILD = MOVEGEN(N[0])
        SORT(CHILD)
        print("Sorted Child List=", CHILD)
        print("CLOSED=", CLOSED)
        newNode = CHILD[0]

    Closed = CLOSED


Hill_Climbing(Start)



..........................................................

Traveling salesman problem

..........................................................

from sys import maxsize 

from itertools import permutations

V = 4

def travellingSalesmanProblem(graph, s): 
    vertex = [] 
    for i in range(V): 
        if i != s: 
            vertex.append(i) 
    min_path = maxsize 
    next_permutation=permutations(vertex)
    for i in next_permutation:
        current_pathweight = 0
        k = s 
        for j in i: 
            current_pathweight += graph[k][j] 
            k = j 
        current_pathweight += graph[k][s] 
        min_path = min(min_path, current_pathweight) 
    return min_path 

if __name__ == "__main__": 
    graph = [[0, 10, 15, 20], [10, 0, 35, 25], 

            [15, 35, 0, 30], [20, 25, 30, 0]] 

    s = 0
    print(travellingSalesmanProblem(graph, s))


...............................................................

Water jug problem 

...............................................................



from collections import defaultdict 

jug1, jug2, aim = 4, 3, 2
visited = defaultdict(lambda: False) 

def waterJugSolver(amt1, amt2):  

    if (amt1 == aim and amt2 == 0) or (amt2 == aim and amt1 == 0): 
        print(amt1, amt2) 
        return True

    if visited[(amt1, amt2)] == False: 
        print(amt1, amt2) 
        visited[(amt1, amt2)] = True
        return (waterJugSolver(0, amt2) or
                waterJugSolver(amt1, 0) or
                waterJugSolver(jug1, amt2) or
                waterJugSolver(amt1, jug2) or
                waterJugSolver(amt1 + min(amt2, (jug1-amt1)), 
                amt2 - min(amt2, (jug1-amt1))) or
                waterJugSolver(amt1 - min(amt1, (jug2-amt2)), 
                amt2 + min(amt1, (jug2-amt2)))) 

    else: 
        return False

print("Steps: ") 

waterJugSolver(0, 0)




...........................................................
...........................................................

1. Write a simple program using Prolog.
grandfather(x, y) .
father(x, z) .
parent(z, y) .


2. Find the greatest number.
max (X,Y) :-
(
X=Y  ->
write('both are equal')
;
X>Y ->
(
Z is X,
print("X is greatest number " +Z)
)
;
(
Z is Y,
print("Y is greatest number"+Z)
)
).


3. Write a program to find factorial of numbers.
fact(1,1).
fact (X,R) :- X1 is X-1, fact(X1,R1), R is R1 * X.


4. Write a program to count number in list.
count ([],0).
count ([H | Tail], N) :-
count (Tail, N1),
 (   number (H)
—> N is N1 + 1
; N = N1
).



